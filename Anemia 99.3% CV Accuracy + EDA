{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8395079,"sourceType":"datasetVersion","datasetId":4994222}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/noureldinraafat/anemia-99-3-cv-accuracy-eda?scriptVersionId=177776809\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-15T09:17:10.917261Z","iopub.execute_input":"2024-05-15T09:17:10.917688Z","iopub.status.idle":"2024-05-15T09:17:13.309776Z","shell.execute_reply.started":"2024-05-15T09:17:10.917654Z","shell.execute_reply":"2024-05-15T09:17:13.308467Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"anemia = pd.read_csv(\"/kaggle/input/anemia-types-classification/diagnosed_cbc_data_v4.csv\")\nanemia","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:13.311796Z","iopub.execute_input":"2024-05-15T09:17:13.312326Z","iopub.status.idle":"2024-05-15T09:17:13.379202Z","shell.execute_reply.started":"2024-05-15T09:17:13.312291Z","shell.execute_reply":"2024-05-15T09:17:13.377854Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Descriptive Statistics**","metadata":{}},{"cell_type":"code","source":"# we'll take a closer look at the data\n\nprint(anemia.describe())\nprint(anemia.isna().sum())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:13.380812Z","iopub.execute_input":"2024-05-15T09:17:13.381543Z","iopub.status.idle":"2024-05-15T09:17:13.426949Z","shell.execute_reply.started":"2024-05-15T09:17:13.381509Z","shell.execute_reply":"2024-05-15T09:17:13.426131Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Clean Data so far, let's check for the existence of duplicates**","metadata":{}},{"cell_type":"code","source":"print(anemia.duplicated().sum())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:13.428752Z","iopub.execute_input":"2024-05-15T09:17:13.429723Z","iopub.status.idle":"2024-05-15T09:17:13.441718Z","shell.execute_reply.started":"2024-05-15T09:17:13.429692Z","shell.execute_reply":"2024-05-15T09:17:13.440637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(len(anemia))\n\nanemia.drop_duplicates(inplace=True)\n\nprint(len(anemia))","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:13.443346Z","iopub.execute_input":"2024-05-15T09:17:13.44401Z","iopub.status.idle":"2024-05-15T09:17:13.453643Z","shell.execute_reply.started":"2024-05-15T09:17:13.443972Z","shell.execute_reply":"2024-05-15T09:17:13.452383Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Nice, duplicates have been removed successfully!, Let's continue**","metadata":{}},{"cell_type":"markdown","source":"# **Exploratory Data Analysis**","metadata":{}},{"cell_type":"code","source":"# set plot style\nsns.set_style(\"whitegrid\")\n\n# increase the figure size\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\nfig = sns.countplot(data=anemia, x=\"Diagnosis\")\n\n# rotate the x-tick labels by 45 degrees\n\nplt.xticks(rotation=45)\n\n\n# show the plot\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:13.455479Z","iopub.execute_input":"2024-05-15T09:17:13.455895Z","iopub.status.idle":"2024-05-15T09:17:13.923319Z","shell.execute_reply.started":"2024-05-15T09:17:13.455858Z","shell.execute_reply":"2024-05-15T09:17:13.92215Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\", message=\"use_inf_as_na option is deprecated\")\n\nfor i in anemia.drop(\"Diagnosis\", axis=1).columns:\n    sns.boxenplot(data=anemia, x=i, color=\"teal\")\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:13.924669Z","iopub.execute_input":"2024-05-15T09:17:13.925625Z","iopub.status.idle":"2024-05-15T09:17:17.253392Z","shell.execute_reply.started":"2024-05-15T09:17:13.925592Z","shell.execute_reply":"2024-05-15T09:17:17.251923Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **I'm not a Doctor!**","metadata":{}},{"cell_type":"markdown","source":"**There seems to be Outliers in all columns!**\n\n**however, since I'm not a Doctor, I'm in no place to tell whether I should drop these outliers or not**\n\n**Maybe some of them will be crucial to the Diagnosis!, so it's best to compare the performance of the models before and after dropping!**","metadata":{}},{"cell_type":"code","source":"for i in anemia.drop(\"Diagnosis\", axis=1).columns:\n    \n    kde = sns.kdeplot(data=anemia, x=i, color='teal', alpha=0.5)\n\n    hist = plt.hist(anemia[i], bins=60, alpha=0.5, color='teal', density=True)\n    \n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:17.254865Z","iopub.execute_input":"2024-05-15T09:17:17.255226Z","iopub.status.idle":"2024-05-15T09:17:23.034398Z","shell.execute_reply.started":"2024-05-15T09:17:17.25519Z","shell.execute_reply":"2024-05-15T09:17:23.033135Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(figsize=(12, 8))\n\nfig = sns.heatmap(anemia.drop(\"Diagnosis\", axis=1).corr(), annot=True)\n\nplt.xticks(rotation=30)\n\nplt.yticks(rotation=30)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:23.035987Z","iopub.execute_input":"2024-05-15T09:17:23.036438Z","iopub.status.idle":"2024-05-15T09:17:24.107852Z","shell.execute_reply.started":"2024-05-15T09:17:23.036398Z","shell.execute_reply":"2024-05-15T09:17:24.106344Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **A Decent Correlation**","metadata":{}},{"cell_type":"markdown","source":"**A decent Correlation was detected between HCT and MCH columns!, maybe we should consider dropping one of them and see how that affects the performance of our models!**","metadata":{}},{"cell_type":"code","source":"import catboost as cb\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import StratifiedKFold","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:24.111322Z","iopub.execute_input":"2024-05-15T09:17:24.111739Z","iopub.status.idle":"2024-05-15T09:17:25.147689Z","shell.execute_reply.started":"2024-05-15T09:17:24.111705Z","shell.execute_reply":"2024-05-15T09:17:25.146553Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **CatBoost Classifier**","metadata":{}},{"cell_type":"code","source":"X = anemia.drop(\"Diagnosis\", axis=1)\ny = anemia[\"Diagnosis\"]\n\nmodel = cb.CatBoostClassifier(iterations=100, learning_rate=0.1,\n                              depth=6,random_state=42, verbose=False)\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nscores = cross_val_score(model, X, y, cv=cv,\n                         scoring='accuracy',\n                         n_jobs=-1, verbose=False)\n\nprint(\"Mean cross-validation score CatBoost:\", scores.mean())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:25.149022Z","iopub.execute_input":"2024-05-15T09:17:25.149419Z","iopub.status.idle":"2024-05-15T09:17:34.078568Z","shell.execute_reply.started":"2024-05-15T09:17:25.14939Z","shell.execute_reply":"2024-05-15T09:17:34.077273Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**That's a very promising score so far!, let's see the score if we drop one of the correlating columns!**","metadata":{}},{"cell_type":"code","source":"X = anemia.drop(\"Diagnosis\", axis=1)\ny = anemia[\"Diagnosis\"]\n\nmodel = cb.CatBoostClassifier(iterations=100, learning_rate=0.1,\n                              depth=6,random_state=42, verbose=False)\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nscores = cross_val_score(model, X, y, cv=cv,\n                         scoring='accuracy',\n                         n_jobs=-1, verbose=False)\n\nprint(\"Mean cross-validation score CatBoost:\", scores.mean())\n\n\n\n# HCT dropped\n\nX = anemia.drop([\"Diagnosis\", \"HCT\"], axis=1)\ny = anemia[\"Diagnosis\"]\n\nmodel = cb.CatBoostClassifier(iterations=100, learning_rate=0.1,\n                              depth=6,random_state=42, verbose=False)\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nscores = cross_val_score(model, X, y, cv=cv,\n                         scoring='accuracy',\n                         n_jobs=-1, verbose=False)\n\nprint(\"Mean cross-validation score CatBoost HCT dropped:\", scores.mean())\n\n\n\n# MCH dropped\n\nX = anemia.drop([\"Diagnosis\", \"MCH\"], axis=1)\ny = anemia[\"Diagnosis\"]\n\nmodel = cb.CatBoostClassifier(iterations=100, learning_rate=0.1,\n                              depth=6,random_state=42, verbose=False)\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nscores = cross_val_score(model, X, y, cv=cv,\n                         scoring='accuracy',\n                         n_jobs=-1, verbose=False)\n\nprint(\"Mean cross-validation score CatBoost MCH dropped:\", scores.mean())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:34.080728Z","iopub.execute_input":"2024-05-15T09:17:34.081113Z","iopub.status.idle":"2024-05-15T09:17:49.90908Z","shell.execute_reply.started":"2024-05-15T09:17:34.081079Z","shell.execute_reply":"2024-05-15T09:17:49.908157Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **No Columns will be Dropped!**","metadata":{}},{"cell_type":"markdown","source":"**It seems that dropping columns degraded the performance, so we'll keep them all!**","metadata":{}},{"cell_type":"markdown","source":"# **Drop Outliers?**","metadata":{}},{"cell_type":"markdown","source":"**Now let's compare the performance of multiple models before and after dropping Outliers**","metadata":{}},{"cell_type":"code","source":"from scipy import stats\n\n\n# Calculate Z-scores for numerical columns\n\nz_scores = np.abs(stats.zscore(anemia.select_dtypes(include=[np.number])))\n\n\n# Identify outliers (e.g., values with Z-score > 3)\n\noutliers = (z_scores > 3).any(axis=1)\n\n# Filter out outliers from the original dataframe\n\nanemia_filtered = anemia[~outliers]","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:49.91003Z","iopub.execute_input":"2024-05-15T09:17:49.910383Z","iopub.status.idle":"2024-05-15T09:17:49.922896Z","shell.execute_reply.started":"2024-05-15T09:17:49.910355Z","shell.execute_reply":"2024-05-15T09:17:49.921852Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = anemia_filtered.drop(\"Diagnosis\", axis=1)\n\ny = anemia_filtered[\"Diagnosis\"]\n\n\n\n\nmodel = cb.CatBoostClassifier(iterations=100, learning_rate=0.1, depth=6, random_state=42, verbose=False)\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\nscores = cross_val_score(model, X, y, cv=cv,\n\n                         scoring='accuracy',\n\n                         n_jobs=-1, verbose=False)\n\n\n\n\nprint(\"Mean cross-validation score CatBoost Outliers dropped:\", scores.mean())\n\n\n\n#########################################################################################################\n\n\n\nX = anemia.drop(\"Diagnosis\", axis=1)\n\ny = anemia[\"Diagnosis\"]\n\n\n\n\nmodel = cb.CatBoostClassifier(iterations=100, learning_rate=0.1, depth=6, random_state=42, verbose=False)\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\nscores = cross_val_score(model, X, y, cv=cv,\n\n                         scoring='accuracy',\n\n                         n_jobs=-1, verbose=False)\n\n\n\n\nprint(\"Mean cross-validation score CatBoost:\", scores.mean())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:17:49.924354Z","iopub.execute_input":"2024-05-15T09:17:49.92529Z","iopub.status.idle":"2024-05-15T09:18:00.894125Z","shell.execute_reply.started":"2024-05-15T09:17:49.925241Z","shell.execute_reply":"2024-05-15T09:18:00.892823Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**A slight Improvement!, now let's see the other models**","metadata":{}},{"cell_type":"markdown","source":"# **Random Forest Classifier**","metadata":{}},{"cell_type":"code","source":"# Outliers dropped\n\n\nX = anemia_filtered.drop(\"Diagnosis\", axis=1)\n\n\ny = anemia_filtered[\"Diagnosis\"]\n\n\n\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\n\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\n\nscores = cross_val_score(model, X, y, cv=cv, scoring='accuracy', n_jobs=-1, verbose=False)\n\n\n\nprint(\"Mean cross-validation score Random Forest Outliers dropped:\", scores.mean())\n\n\n\n#########################################################################################################\n\n\n\n# Original dataset\n\n\nX = anemia.drop(\"Diagnosis\", axis=1)\n\n\ny = anemia[\"Diagnosis\"]\n\n\n\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\n\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\n\nscores = cross_val_score(model, X, y, cv=cv, scoring='accuracy', n_jobs=-1, verbose=False)\n\n\n\nprint(\"Mean cross-validation score Random Forest:\", scores.mean())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:18:00.895479Z","iopub.execute_input":"2024-05-15T09:18:00.895934Z","iopub.status.idle":"2024-05-15T09:18:02.433523Z","shell.execute_reply.started":"2024-05-15T09:18:00.895896Z","shell.execute_reply":"2024-05-15T09:18:02.432417Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Decision Tree Classifier**","metadata":{}},{"cell_type":"code","source":"# Outliers dropped\n\n\nX = anemia_filtered.drop(\"Diagnosis\", axis=1)\n\n\ny = anemia_filtered[\"Diagnosis\"]\n\n\n\nmodel = DecisionTreeClassifier(random_state=42)\n\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\n\nscores = cross_val_score(model, X, y, cv=cv, scoring='accuracy', n_jobs=-1, verbose=False)\n\n\n\nprint(\"Mean cross-validation score Decision Tree Outliers dropped:\", scores.mean())\n\n\n\n#########################################################################################################\n\n\n\n# Original dataset\n\n\nX = anemia.drop(\"Diagnosis\", axis=1)\n\n\ny = anemia[\"Diagnosis\"]\n\n\n\nmodel = DecisionTreeClassifier(random_state=42)\n\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\n\nscores = cross_val_score(model, X, y, cv=cv, scoring='accuracy', n_jobs=-1, verbose=False)\n\n\n\nprint(\"Mean cross-validation score Decision Tree:\", scores.mean())","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:18:02.434989Z","iopub.execute_input":"2024-05-15T09:18:02.435557Z","iopub.status.idle":"2024-05-15T09:18:02.527353Z","shell.execute_reply.started":"2024-05-15T09:18:02.435527Z","shell.execute_reply":"2024-05-15T09:18:02.526263Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Outliers will be dropped from now and on!**","metadata":{}},{"cell_type":"markdown","source":"**dropping outliers here enhanced the performance slightly for the most part, so we'll drop them!**","metadata":{}},{"cell_type":"markdown","source":"# **CatBoost Optimization**","metadata":{}},{"cell_type":"code","source":"from scipy.stats import uniform\n\n# Outliers dropped\n\nX = anemia_filtered.drop(\"Diagnosis\", axis=1)\n\ny = anemia_filtered[\"Diagnosis\"]\n\n\n# Define the hyperparameter search space\n\nparam_dist = {\n\n    'iterations': [50, 100, 200],\n\n    'learning_rate': uniform(0.01, 0.1),\n\n    'depth': [3, 6, 9],\n\n    'random_state': [42],\n\n    'verbose': [False]\n\n}\n\n\n# Define the CatBoostClassifier model\n\nmodel = cb.CatBoostClassifier()\n\n\n# Define the RandomizedSearchCV object\n\nrandom_search = RandomizedSearchCV(\n\n    estimator=model, param_distributions=param_dist, n_iter=10,\n    cv=StratifiedKFold(n_splits=5, shuffle=True, random_state=42),\n    scoring='accuracy', n_jobs=-1, verbose=False, random_state=42)\n\n\n# Fit the RandomizedSearchCV object to the data\n\nrandom_search.fit(X, y)\n\n\n# Print the best hyperparameters and the corresponding cross-validation score\n\nprint(\"Best hyperparameters:\", random_search.best_params_)\n\nprint(\"Mean cross-validation score CatBoost with optimized hyperparameters:\", random_search.best_score_)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:18:02.528478Z","iopub.execute_input":"2024-05-15T09:18:02.529179Z","iopub.status.idle":"2024-05-15T09:20:10.570915Z","shell.execute_reply.started":"2024-05-15T09:18:02.529148Z","shell.execute_reply":"2024-05-15T09:20:10.570025Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Random Forest Optimization**","metadata":{}},{"cell_type":"code","source":"# Outliers dropped\n\nX = anemia_filtered.drop(\"Diagnosis\", axis=1)\n\ny = anemia_filtered[\"Diagnosis\"]\n\n\n# Define the hyperparameter search space\n\nparam_dist = {\n\n    'n_estimators': [100, 200, 300],\n\n    'max_depth': [None, 10, 20, 30],\n\n    'min_samples_split': [2, 5, 10],\n\n    'min_samples_leaf': [1, 2, 4],\n\n    'bootstrap': [True, False],\n\n    'random_state': [42]\n\n}\n\n\n# Define the RandomForestClassifier model\n\nmodel = RandomForestClassifier()\n\n\n# Define the RandomizedSearchCV object\n\nrandom_search = RandomizedSearchCV(estimator=model, param_distributions=param_dist, n_iter=10,\n                                   cv=StratifiedKFold(n_splits=5, shuffle=True, random_state=42),\n                                   scoring='accuracy', n_jobs=-1, verbose=False, random_state=42)\n\n\n# Fit the RandomizedSearchCV object to the data\n\nrandom_search.fit(X, y)\n\n\n# Print the best hyperparameters and the corresponding cross-validation score\n\nprint(\"Best hyperparameters:\", random_search.best_params_)\n\nprint(\"Mean cross-validation score Random Forest with optimized hyperparameters:\", random_search.best_score_)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:20:10.572013Z","iopub.execute_input":"2024-05-15T09:20:10.572516Z","iopub.status.idle":"2024-05-15T09:20:18.523333Z","shell.execute_reply.started":"2024-05-15T09:20:10.57249Z","shell.execute_reply":"2024-05-15T09:20:18.522147Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Decision Tree Optimization**","metadata":{}},{"cell_type":"code","source":"# Outliers dropped\n\nX = anemia_filtered.drop(\"Diagnosis\", axis=1)\n\ny = anemia_filtered[\"Diagnosis\"]\n\n\n# Define the hyperparameter search space\n\nparam_dist = {\n\n    'max_depth': [None, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n\n    'min_samples_split': [2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n\n    'min_samples_leaf': [1, 2, 4, 8, 16, 32, 64],\n\n    'random_state': [42]\n\n}\n\n\n# Define the DecisionTreeClassifier model\n\nmodel = DecisionTreeClassifier()\n\n\n# Define the RandomizedSearchCV object\n\nrandom_search = RandomizedSearchCV(estimator=model, param_distributions=param_dist, n_iter=100,\n                                   cv=StratifiedKFold(n_splits=5, shuffle=True, random_state=42),\n                                   scoring='accuracy', n_jobs=-1, verbose=False, random_state=42)\n\n\n# Fit the RandomizedSearchCV object to the data\n\nrandom_search.fit(X, y)\n\n\n# Print the best hyperparameters and the corresponding cross-validation score\n\nprint(\"Best hyperparameters:\", random_search.best_params_)\n\nprint(\"Mean cross-validation score Decision Tree with optimized hyperparameters:\", random_search.best_score_)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:20:18.52477Z","iopub.execute_input":"2024-05-15T09:20:18.525201Z","iopub.status.idle":"2024-05-15T09:20:20.336452Z","shell.execute_reply.started":"2024-05-15T09:20:18.525165Z","shell.execute_reply":"2024-05-15T09:20:20.335344Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**After the optimization, Decision Tree still Outperforms the others!**","metadata":{}},{"cell_type":"code","source":"# Create a list of dictionaries for the models to be plotted later\n\nmodels = []\n\nX = anemia_filtered.drop(\"Diagnosis\", axis=1)\n\ny = anemia_filtered[\"Diagnosis\"]\n\n\n#######################################################################################################################################\n\n\nmodel = cb.CatBoostClassifier(**{'depth': 3, 'iterations': 200, 'learning_rate': 0.07118528947223794,\n                                 'random_state': 42, 'verbose': False})\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\nscores = cross_val_score(model, X, y, cv=cv,\n\n                         scoring='accuracy',\n\n                         n_jobs=-1, verbose=False)\n\n\n\n\nmodels.append({\"model\":\"CatBoost\", \"Accuracy\":scores.mean()})\n\n\n#######################################################################################################################################\n\n\nmodel = RandomForestClassifier(**{'random_state': 42, 'n_estimators': 100, 'min_samples_split': 5,\n                                  'min_samples_leaf': 1, 'max_depth': 10, 'bootstrap': False})\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\nscores = cross_val_score(model, X, y, cv=cv,\n\n                         scoring='accuracy',\n\n                         n_jobs=-1, verbose=False)\n\n\n\n\nmodels.append({\"model\":\"Random Forest\", \"Accuracy\":scores.mean()})\n\n\n#######################################################################################################################################\n\n\nmodel = DecisionTreeClassifier(**{'random_state': 42, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_depth': 20})\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\n\nscores = cross_val_score(model, X, y, cv=cv,\n\n                         scoring='accuracy',\n\n                         n_jobs=-1, verbose=False)\n\n\n\n\nmodels.append({\"model\":\"Decision Tree\", \"Accuracy\":scores.mean()})\n\n\n#######################################################################################################################################\n\n\nmodels = pd.DataFrame(models)\n\nprint(models)","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:20:20.338352Z","iopub.execute_input":"2024-05-15T09:20:20.338946Z","iopub.status.idle":"2024-05-15T09:20:23.97346Z","shell.execute_reply.started":"2024-05-15T09:20:20.338915Z","shell.execute_reply":"2024-05-15T09:20:23.97258Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Comparing the performance of Optimized Models**","metadata":{}},{"cell_type":"code","source":"# Create the bar plot\n\n\nsns.set_style(\"whitegrid\")\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\n\nsns.barplot(x=\"model\", y=\"Accuracy\", data=models, ax=ax)\n\n\nsns.despine(left=True, bottom=True)\n\n\nax.set_ylabel(\"Accuracy\")\n\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\")\n\n\n# Set the y-axis limits to zoom in on the upper part of the plot\n\nax.set_ylim(0.95, 1)\n\n\n# Add the title in bold font\n\n\nplt.title(\"Comparison of Cross Validation Accuracy of Different Models\", fontweight='bold')\n\n\n# Add the scores to each bar with the same color as the bar\n\n\nfor p in ax.patches:\n\n\n    color = p.get_facecolor()\n\n\n    ax.annotate(f\"{p.get_height():.3f}\", (p.get_x() + p.get_width() / 2, p.get_height()), ha='center',\n                va='bottom', fontsize=8, color=color, fontweight='bold')\n\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:20:23.975035Z","iopub.execute_input":"2024-05-15T09:20:23.975667Z","iopub.status.idle":"2024-05-15T09:20:24.274136Z","shell.execute_reply.started":"2024-05-15T09:20:23.975635Z","shell.execute_reply":"2024-05-15T09:20:24.273035Z"},"trusted":true},"execution_count":null,"outputs":[]}]}