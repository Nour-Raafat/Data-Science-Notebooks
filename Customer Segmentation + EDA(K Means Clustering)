{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2549419,"sourceType":"datasetVersion","datasetId":1546318}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/noureldinraafat/customer-segmentation-eda-k-means-clustering?scriptVersionId=189516880\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-24T02:55:20.714647Z","iopub.execute_input":"2024-07-24T02:55:20.715094Z","iopub.status.idle":"2024-07-24T02:55:20.720775Z","shell.execute_reply.started":"2024-07-24T02:55:20.715058Z","shell.execute_reply":"2024-07-24T02:55:20.719501Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# read the data\n\ncustomers = pd.read_csv(\"/kaggle/input/customer-personality-analysis/marketing_campaign.csv\", delimiter=\"\\t\")\n\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:23.094167Z","iopub.execute_input":"2024-07-24T02:55:23.094572Z","iopub.status.idle":"2024-07-24T02:55:23.134974Z","shell.execute_reply.started":"2024-07-24T02:55:23.094539Z","shell.execute_reply":"2024-07-24T02:55:23.13373Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Descriptive Statistics**","metadata":{}},{"cell_type":"code","source":"# we'll take a closer look at the data\n\nprint(customers.describe())","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:23.137109Z","iopub.execute_input":"2024-07-24T02:55:23.137579Z","iopub.status.idle":"2024-07-24T02:55:23.203051Z","shell.execute_reply.started":"2024-07-24T02:55:23.137535Z","shell.execute_reply":"2024-07-24T02:55:23.20187Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check for Null values\n\nprint(customers.isna().sum())\n\nprint(\"\\n\\n\")\n\n# check for duplicates\n\nprint(\"Number of duplicates: \"+str(customers.duplicated().sum()))","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:23.73917Z","iopub.execute_input":"2024-07-24T02:55:23.740103Z","iopub.status.idle":"2024-07-24T02:55:23.754441Z","shell.execute_reply.started":"2024-07-24T02:55:23.740066Z","shell.execute_reply":"2024-07-24T02:55:23.753207Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**No duplicates were found, 24 out of 2240 records contained Nan values in the income column, so we'll drop them since they are a slight amount**","metadata":{}},{"cell_type":"code","source":"# drop th Nan values\n\ncustomers = customers.dropna()\n\n\nprint(customers.isna().sum())","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:23.756972Z","iopub.execute_input":"2024-07-24T02:55:23.757437Z","iopub.status.idle":"2024-07-24T02:55:23.76812Z","shell.execute_reply.started":"2024-07-24T02:55:23.757385Z","shell.execute_reply":"2024-07-24T02:55:23.767046Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Nan values were dropped successfully!**","metadata":{}},{"cell_type":"markdown","source":"# **Exploratory Data Analysis**","metadata":{}},{"cell_type":"code","source":"# set plot style\n\nsns.set_style(\"whitegrid\")","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:24.214094Z","iopub.execute_input":"2024-07-24T02:55:24.215092Z","iopub.status.idle":"2024-07-24T02:55:24.219856Z","shell.execute_reply.started":"2024-07-24T02:55:24.215055Z","shell.execute_reply":"2024-07-24T02:55:24.218615Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **People Columns**","metadata":{}},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\", message=\"use_inf_as_na option is deprecated\")\n\n\nsns.boxplot(data=customers, x=\"Year_Birth\", color=\"goldenrod\")\n\nplt.show()\n\nsns.histplot(data=customers, x=\"Year_Birth\", color=\"goldenrod\")\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:24.225992Z","iopub.execute_input":"2024-07-24T02:55:24.226394Z","iopub.status.idle":"2024-07-24T02:55:24.820159Z","shell.execute_reply.started":"2024-07-24T02:55:24.22636Z","shell.execute_reply":"2024-07-24T02:55:24.818907Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Very few Oldies exist here!, about 3 outliers from the 19th century!**\n\n**I guess dropping them would make more sense here**","metadata":{}},{"cell_type":"markdown","source":"**Most of our customers were born between the 60s and the 80s**","metadata":{}},{"cell_type":"code","source":"# calculate the Z-score for each value in column\n\nz_scores = np.abs((customers['Year_Birth'] - customers['Year_Birth'].mean()) / customers['Year_Birth'].std())\n\n\n# drop rows with Z-scores greater than 3\n\ncustomers = customers[z_scores <= 3]\n\n\nprint(len(customers))","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:24.822131Z","iopub.execute_input":"2024-07-24T02:55:24.822484Z","iopub.status.idle":"2024-07-24T02:55:24.83225Z","shell.execute_reply.started":"2024-07-24T02:55:24.822453Z","shell.execute_reply":"2024-07-24T02:55:24.831082Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Outliers dropped successfully!**","metadata":{}},{"cell_type":"code","source":"sns.countplot(data=customers, x=\"Education\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:24.833811Z","iopub.execute_input":"2024-07-24T02:55:24.834202Z","iopub.status.idle":"2024-07-24T02:55:25.09021Z","shell.execute_reply.started":"2024-07-24T02:55:24.83417Z","shell.execute_reply":"2024-07-24T02:55:25.088968Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Most customers had a graduation level education while the Least amount had Basic level**","metadata":{}},{"cell_type":"code","source":"sns.countplot(data=customers, x=\"Marital_Status\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:25.093467Z","iopub.execute_input":"2024-07-24T02:55:25.093969Z","iopub.status.idle":"2024-07-24T02:55:25.385751Z","shell.execute_reply.started":"2024-07-24T02:55:25.093925Z","shell.execute_reply":"2024-07-24T02:55:25.384715Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Interesting!, we've got two categories that are rather ambigous, Absurd and YOLO seem to be very little in amount here so we'll drop them**\n\n**\"Single\", \"Alone\", \"Divorced\" and \"Widow\" will be replaced with the value 0**\n\n**\"Together\" and \"Married\" will be replaced with the value 1**\n\n**And we create a binary column Relationship with value 0 for no relationship and 1 for relationship**","metadata":{}},{"cell_type":"code","source":"print(len(customers[customers[\"Marital_Status\"] == \"Absurd\"]))\nprint(len(customers[customers[\"Marital_Status\"] == \"YOLO\"]))\nprint(len(customers))\n\ncustomers = customers[~customers[\"Marital_Status\"].isin([\"Absurd\", \"YOLO\"])]\n\nprint(len(customers[customers[\"Marital_Status\"] == \"Absurd\"]))\nprint(len(customers[customers[\"Marital_Status\"] == \"YOLO\"]))\nprint(len(customers))","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:25.387148Z","iopub.execute_input":"2024-07-24T02:55:25.387568Z","iopub.status.idle":"2024-07-24T02:55:25.400188Z","shell.execute_reply.started":"2024-07-24T02:55:25.387532Z","shell.execute_reply":"2024-07-24T02:55:25.398935Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"customers[\"Relationship\"] = [1 if i in [\"Together\", \"Married\"] else 0 for i in customers[\"Marital_Status\"]]\n\ncustomers = customers.drop(\"Marital_Status\", axis=1)\n\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:25.401824Z","iopub.execute_input":"2024-07-24T02:55:25.402167Z","iopub.status.idle":"2024-07-24T02:55:25.431966Z","shell.execute_reply.started":"2024-07-24T02:55:25.402139Z","shell.execute_reply":"2024-07-24T02:55:25.430918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.countplot(data=customers, x=\"Relationship\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:25.433323Z","iopub.execute_input":"2024-07-24T02:55:25.433655Z","iopub.status.idle":"2024-07-24T02:55:25.644799Z","shell.execute_reply.started":"2024-07-24T02:55:25.433621Z","shell.execute_reply":"2024-07-24T02:55:25.643586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Good!, column replaced successfully!**","metadata":{}},{"cell_type":"code","source":"sns.boxplot(data=customers, x=\"Income\", color=\"goldenrod\")\n\nplt.show()\n\nsns.histplot(data=customers, x=\"Income\", color=\"goldenrod\")\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:25.646206Z","iopub.execute_input":"2024-07-24T02:55:25.646562Z","iopub.status.idle":"2024-07-24T02:55:26.389799Z","shell.execute_reply.started":"2024-07-24T02:55:25.646532Z","shell.execute_reply":"2024-07-24T02:55:26.388769Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Few outliers here, let's drop them!**\n","metadata":{}},{"cell_type":"code","source":"# calculate the Z-score for each value in column\n\nz_scores = np.abs((customers['Income'] - customers['Income'].mean()) / customers['Income'].std())\n\n\n# drop rows with Z-scores greater than 3\n\ncustomers = customers[z_scores <= 3]","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:26.391266Z","iopub.execute_input":"2024-07-24T02:55:26.391608Z","iopub.status.idle":"2024-07-24T02:55:26.400284Z","shell.execute_reply.started":"2024-07-24T02:55:26.391577Z","shell.execute_reply":"2024-07-24T02:55:26.399189Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.histplot(data=customers, x=\"Income\", color=\"goldenrod\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:26.404428Z","iopub.execute_input":"2024-07-24T02:55:26.404791Z","iopub.status.idle":"2024-07-24T02:55:26.751952Z","shell.execute_reply.started":"2024-07-24T02:55:26.404762Z","shell.execute_reply":"2024-07-24T02:55:26.750788Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Most customers have income between 40000 and 80000**","metadata":{}},{"cell_type":"code","source":"sns.countplot(data=customers, x=\"Kidhome\")\n\nplt.show()\n\nsns.countplot(data=customers, x=\"Teenhome\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:26.753595Z","iopub.execute_input":"2024-07-24T02:55:26.754059Z","iopub.status.idle":"2024-07-24T02:55:27.096676Z","shell.execute_reply.started":"2024-07-24T02:55:26.754017Z","shell.execute_reply":"2024-07-24T02:55:27.093571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **New Column Offspring**","metadata":{}},{"cell_type":"markdown","source":"**I'll create a new column where I sum the number of kids plus teens of an Individual, and this column will represent his/her total offspring**","metadata":{}},{"cell_type":"code","source":"print(type(customers[\"Kidhome\"][0]))\nprint(type(customers[\"Teenhome\"][0]))","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:27.098032Z","iopub.execute_input":"2024-07-24T02:55:27.098382Z","iopub.status.idle":"2024-07-24T02:55:27.104858Z","shell.execute_reply.started":"2024-07-24T02:55:27.098346Z","shell.execute_reply":"2024-07-24T02:55:27.103792Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Nice!, both of them columns are integers, I could easily create another column that is their summation**","metadata":{}},{"cell_type":"code","source":"warnings.filterwarnings('ignore', category=pd.errors.SettingWithCopyWarning)\n\ncustomers[\"Offspring\"] = customers[\"Kidhome\"] + customers[\"Teenhome\"]\n\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:27.106424Z","iopub.execute_input":"2024-07-24T02:55:27.106862Z","iopub.status.idle":"2024-07-24T02:55:27.138464Z","shell.execute_reply.started":"2024-07-24T02:55:27.106822Z","shell.execute_reply":"2024-07-24T02:55:27.136986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Column added successfully!, Now let's kill the \"Kidhome\", \"Teenhome\" columns!**","metadata":{}},{"cell_type":"code","source":"customers = customers.drop([\"Kidhome\", \"Teenhome\"], axis=1)\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:27.13999Z","iopub.execute_input":"2024-07-24T02:55:27.140333Z","iopub.status.idle":"2024-07-24T02:55:27.167855Z","shell.execute_reply.started":"2024-07-24T02:55:27.140303Z","shell.execute_reply":"2024-07-24T02:55:27.16667Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**So far so good**","metadata":{}},{"cell_type":"markdown","source":"# **DateTime Column?**","metadata":{}},{"cell_type":"code","source":"print(type(customers[\"Dt_Customer\"][0]))","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:27.169168Z","iopub.execute_input":"2024-07-24T02:55:27.169489Z","iopub.status.idle":"2024-07-24T02:55:27.175638Z","shell.execute_reply.started":"2024-07-24T02:55:27.169454Z","shell.execute_reply":"2024-07-24T02:55:27.174524Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Alright, we convert it to datetime object**","metadata":{}},{"cell_type":"code","source":"customers[\"Dt_Customer\"] = pd.to_datetime(customers[\"Dt_Customer\"], format=\"%d-%m-%Y\")\n\nprint(type(customers[\"Dt_Customer\"][0]))\n\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:27.177134Z","iopub.execute_input":"2024-07-24T02:55:27.177503Z","iopub.status.idle":"2024-07-24T02:55:27.216912Z","shell.execute_reply.started":"2024-07-24T02:55:27.17747Z","shell.execute_reply":"2024-07-24T02:55:27.215933Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.histplot(data=customers, x=\"Dt_Customer\", color=\"goldenrod\")\nplt.xticks(rotation=45)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:27.218331Z","iopub.execute_input":"2024-07-24T02:55:27.218681Z","iopub.status.idle":"2024-07-24T02:55:27.730104Z","shell.execute_reply.started":"2024-07-24T02:55:27.218652Z","shell.execute_reply":"2024-07-24T02:55:27.728913Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Uniform distribution from 7-2012 to 7-2014**","metadata":{}},{"cell_type":"code","source":"sns.boxplot(data=customers, x=\"Recency\", color=\"goldenrod\")\n\nplt.show()\n\nsns.histplot(data=customers, x=\"Recency\", color=\"goldenrod\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:27.731611Z","iopub.execute_input":"2024-07-24T02:55:27.731985Z","iopub.status.idle":"2024-07-24T02:55:28.306036Z","shell.execute_reply.started":"2024-07-24T02:55:27.731953Z","shell.execute_reply":"2024-07-24T02:55:28.30492Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**No outliers, a uniform distribution**","metadata":{}},{"cell_type":"code","source":"sns.countplot(data=customers, x=\"Complain\", color=\"goldenrod\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:28.307722Z","iopub.execute_input":"2024-07-24T02:55:28.308175Z","iopub.status.idle":"2024-07-24T02:55:28.460227Z","shell.execute_reply.started":"2024-07-24T02:55:28.308133Z","shell.execute_reply":"2024-07-24T02:55:28.459075Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Products Columns**","metadata":{}},{"cell_type":"markdown","source":"**These columns represent a customer's total spending on a specific product, I'd like to check their data type so that I create a new column \"Spending\" that's their summation**","metadata":{}},{"cell_type":"code","source":"cols = [\"MntWines\", \"MntFruits\", \"MntMeatProducts\",\n        \"MntFishProducts\", \"MntSweetProducts\", \"MntGoldProds\"]\n\ntypes = [type(customers[i][0]) for i in cols]\nprint(types)","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:28.461981Z","iopub.execute_input":"2024-07-24T02:55:28.463513Z","iopub.status.idle":"2024-07-24T02:55:28.471156Z","shell.execute_reply.started":"2024-07-24T02:55:28.463456Z","shell.execute_reply":"2024-07-24T02:55:28.469983Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Very Nice, I could add them into the new column**","metadata":{}},{"cell_type":"code","source":"customers[\"Spending\"] = customers[\"MntWines\"] + customers[\"MntFruits\"] + customers[\"MntMeatProducts\"] + \\\n                        customers[\"MntFishProducts\"] + customers[\"MntSweetProducts\"] + customers[\"MntGoldProds\"]\n\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:28.472856Z","iopub.execute_input":"2024-07-24T02:55:28.474274Z","iopub.status.idle":"2024-07-24T02:55:28.761536Z","shell.execute_reply.started":"2024-07-24T02:55:28.474228Z","shell.execute_reply":"2024-07-24T02:55:28.76045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Successfully added, let's kill these six columns**","metadata":{}},{"cell_type":"code","source":"customers = customers.drop(cols, axis=1)\n\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:28.762775Z","iopub.execute_input":"2024-07-24T02:55:28.763111Z","iopub.status.idle":"2024-07-24T02:55:28.790266Z","shell.execute_reply.started":"2024-07-24T02:55:28.763083Z","shell.execute_reply":"2024-07-24T02:55:28.789138Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**About time we dropped the \"ID\" column**","metadata":{}},{"cell_type":"code","source":"customers = customers.drop(\"ID\", axis=1)\n\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:28.791523Z","iopub.execute_input":"2024-07-24T02:55:28.791837Z","iopub.status.idle":"2024-07-24T02:55:28.819016Z","shell.execute_reply.started":"2024-07-24T02:55:28.791808Z","shell.execute_reply":"2024-07-24T02:55:28.817967Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.boxplot(data=customers, x=\"Spending\", color=\"goldenrod\")\nplt.show()\n\nsns.histplot(data=customers, x=\"Spending\", color=\"goldenrod\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:28.820388Z","iopub.execute_input":"2024-07-24T02:55:28.820727Z","iopub.status.idle":"2024-07-24T02:55:29.391399Z","shell.execute_reply.started":"2024-07-24T02:55:28.820699Z","shell.execute_reply":"2024-07-24T02:55:29.390277Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**One little outlier slightly beyond the upper bound!, won't cause any harm, we'll keep it**","metadata":{}},{"cell_type":"markdown","source":"# **Promotion Columns**","metadata":{}},{"cell_type":"code","source":"sns.boxplot(data=customers, x=\"NumDealsPurchases\", color=\"goldenrod\")\nplt.show()\n\nsns.histplot(data=customers, x=\"NumDealsPurchases\", color=\"goldenrod\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:29.392867Z","iopub.execute_input":"2024-07-24T02:55:29.393286Z","iopub.status.idle":"2024-07-24T02:55:30.042668Z","shell.execute_reply.started":"2024-07-24T02:55:29.393247Z","shell.execute_reply":"2024-07-24T02:55:30.041504Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Looks like there is a decent amount of outliers, let's see how many**","metadata":{}},{"cell_type":"code","source":"print(len(customers[customers[\"NumDealsPurchases\"] > 6]))","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:30.044013Z","iopub.execute_input":"2024-07-24T02:55:30.044334Z","iopub.status.idle":"2024-07-24T02:55:30.051454Z","shell.execute_reply.started":"2024-07-24T02:55:30.044306Z","shell.execute_reply":"2024-07-24T02:55:30.050358Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Let's drop them**","metadata":{}},{"cell_type":"code","source":"print(len(customers))\n\n\n# calculate Q1 and Q3\n\nQ1 = np.percentile(customers['NumDealsPurchases'], 25)\n\nQ3 = np.percentile(customers['NumDealsPurchases'], 75)\n\n\n# calculate IQR\n\nIQR = Q3 - Q1\n\n\n# define lower and upper bounds\n\nlower_bound = Q1 - 1.5 * IQR\n\nupper_bound = Q3 + 1.5 * IQR\n\n\n# drop rows with values outside the bounds\n\ncustomers = customers[(customers['NumDealsPurchases'] >= lower_bound) & (customers['NumDealsPurchases'] <= upper_bound)]\n\n\nprint(len(customers))","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:30.052776Z","iopub.execute_input":"2024-07-24T02:55:30.053135Z","iopub.status.idle":"2024-07-24T02:55:30.065423Z","shell.execute_reply.started":"2024-07-24T02:55:30.053098Z","shell.execute_reply":"2024-07-24T02:55:30.064259Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Perfect!, Let's continue**","metadata":{}},{"cell_type":"code","source":"cols = [\"AcceptedCmp1\", \"AcceptedCmp2\", \"AcceptedCmp3\", \"AcceptedCmp4\", \"AcceptedCmp5\", \"Response\"]\n\nfor i in cols:\n    \n    sns.countplot(data=customers, x=i)\n\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:30.071503Z","iopub.execute_input":"2024-07-24T02:55:30.07186Z","iopub.status.idle":"2024-07-24T02:55:31.335315Z","shell.execute_reply.started":"2024-07-24T02:55:30.07183Z","shell.execute_reply":"2024-07-24T02:55:31.334131Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**It seems that the Last Campaign was the most successful one and the Second Campaign was the least successful one**\n\n**The rest were nearly equal**","metadata":{}},{"cell_type":"code","source":"cols = [\"Z_CostContact\", \"Z_Revenue\"]\n\nfor i in cols:\n    \n    sns.countplot(data=customers, x=i)\n\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:31.336951Z","iopub.execute_input":"2024-07-24T02:55:31.337389Z","iopub.status.idle":"2024-07-24T02:55:31.73672Z","shell.execute_reply.started":"2024-07-24T02:55:31.337347Z","shell.execute_reply":"2024-07-24T02:55:31.735695Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Two meaningless, useless columns, we DROP!**","metadata":{}},{"cell_type":"code","source":"customers = customers.drop(cols, axis=1)\n\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:31.738201Z","iopub.execute_input":"2024-07-24T02:55:31.738541Z","iopub.status.idle":"2024-07-24T02:55:31.763658Z","shell.execute_reply.started":"2024-07-24T02:55:31.738512Z","shell.execute_reply":"2024-07-24T02:55:31.762552Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Place Columns**","metadata":{}},{"cell_type":"code","source":"cols = [\"NumWebPurchases\", \"NumCatalogPurchases\", \"NumStorePurchases\", \"NumWebVisitsMonth\"]\n\nfor i in cols:\n    sns.boxplot(data=customers, x=i, color=\"goldenrod\")\n    plt.show()\n\n    sns.histplot(data=customers, x=i, color=\"goldenrod\")\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:31.764925Z","iopub.execute_input":"2024-07-24T02:55:31.765253Z","iopub.status.idle":"2024-07-24T02:55:33.983151Z","shell.execute_reply.started":"2024-07-24T02:55:31.765225Z","shell.execute_reply":"2024-07-24T02:55:33.981816Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**We drop the last remaining outliers**","metadata":{}},{"cell_type":"code","source":"print(len(customers))\n\n\nfor i in cols:\n    \n    # calculate Q1 and Q3\n\n    Q1 = np.percentile(customers[i], 25)\n\n    Q3 = np.percentile(customers[i], 75)\n\n\n    # calculate IQR\n\n    IQR = Q3 - Q1\n\n\n    # define lower and upper bounds\n\n    lower_bound = Q1 - 1.5 * IQR\n\n    upper_bound = Q3 + 1.5 * IQR\n\n\n    # drop rows with values outside the bounds\n\n    customers = customers[(customers[i] >= lower_bound) & (customers[i] <= upper_bound)]\n\n\nprint(len(customers))","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:33.984628Z","iopub.execute_input":"2024-07-24T02:55:33.985102Z","iopub.status.idle":"2024-07-24T02:55:34.002709Z","shell.execute_reply.started":"2024-07-24T02:55:33.985059Z","shell.execute_reply":"2024-07-24T02:55:34.001511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Finally!, Now we start segmentation process!**","metadata":{}},{"cell_type":"markdown","source":"# **Principal Component Analysis**","metadata":{}},{"cell_type":"markdown","source":"**We've got a Datetime column that we need to handle before we use PCA as well as a Categorical column**","metadata":{}},{"cell_type":"code","source":"from sklearn.decomposition import PCA\n\nfrom sklearn.preprocessing import StandardScaler\n\n\n\ncustomers_pca = pd.DataFrame(customers)\n\n# handle Datetime column before PCA\n\ncustomers_pca['Year'] = customers_pca['Dt_Customer'].dt.year\n\ncustomers_pca['Month'] = customers_pca['Dt_Customer'].dt.month\n\ncustomers_pca['Day'] = customers_pca['Dt_Customer'].dt.day\n\ncustomers_pca = customers_pca.drop('Dt_Customer', axis=1)\n\n# handle categorical column by getting dummies\n\ncustomers_pca = pd.get_dummies(customers_pca)\n\n\n# Scale the data\n\nscaler = StandardScaler()\n\ncustomers_pca = scaler.fit_transform(customers_pca)\n\n\npca = PCA(n_components=3, random_state=42)\n\npca_data = pca.fit_transform(customers_pca)\n\npca_data","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:34.004197Z","iopub.execute_input":"2024-07-24T02:55:34.004719Z","iopub.status.idle":"2024-07-24T02:55:34.064854Z","shell.execute_reply.started":"2024-07-24T02:55:34.00468Z","shell.execute_reply":"2024-07-24T02:55:34.062841Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Good, now we perform the elbow technique!**","metadata":{}},{"cell_type":"markdown","source":"# **Elbow Technique K Means**","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import pairwise_distances\n\n\nn_clusters_range = range(1, 11)  # try 1 to 10 clusters\n\nwcss_values = []\n\n\nfor n_clusters in n_clusters_range:\n\n    kmeans = KMeans(n_init=\"auto\", n_clusters=n_clusters, random_state=42)\n\n    kmeans.fit(pca_data)\n\n    wcss_values.append(kmeans.inertia_)\n\n    \n\nplt.figure(figsize=(8, 6))\n\nsns.lineplot(x=n_clusters_range, y=wcss_values, marker=\"o\")\n\n\nplt.xlabel('Number of clusters')\n\nplt.ylabel('WCSS')\n\nplt.title('Elbow method for determining the optimal number of clusters')\n\n\nplt.xticks(range(1, 11))  # force x-axis to show all numbers from 1 to 10\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:34.066864Z","iopub.execute_input":"2024-07-24T02:55:34.070267Z","iopub.status.idle":"2024-07-24T02:55:34.601634Z","shell.execute_reply.started":"2024-07-24T02:55:34.07019Z","shell.execute_reply":"2024-07-24T02:55:34.600567Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Based on the this Elbow Graph, I'd say the elbow point is at K=4**","metadata":{}},{"cell_type":"markdown","source":"# **Optimal K=4**","metadata":{}},{"cell_type":"code","source":"import plotly.express as px\n\n#4 clusters\n\nkmeans_4 = KMeans(n_init=\"auto\", n_clusters=4, random_state=42)\n\nkmeans_4.fit(pca_data)\n\nlabels_4 = kmeans_4.labels_\n\n#3D plot for 4 clusters\n\nfig = px.scatter_3d(pca_data, x=pca_data[:, 0], y=pca_data[:, 1], z=pca_data[:, 2], color=labels_4)\n\nfig.update_layout(title='3D Plot with 4 Clusters', scene=dict(xaxis_title='PC1', yaxis_title='PC2', zaxis_title='PC3'))\n\nfig.update_traces(marker=dict(size=4))\n\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:34.603056Z","iopub.execute_input":"2024-07-24T02:55:34.603471Z","iopub.status.idle":"2024-07-24T02:55:34.6911Z","shell.execute_reply.started":"2024-07-24T02:55:34.603431Z","shell.execute_reply":"2024-07-24T02:55:34.689924Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Now we add the cluster labels to the original dataset**","metadata":{}},{"cell_type":"code","source":"# Create a KMeans model with K=4\n\nkmeans = KMeans(n_init=\"auto\", n_clusters=4, random_state=43)\n\n\n# Fit the model to the PCA-transformed data\n\nkmeans.fit(pca_data)\n\n\n# Get the cluster labels for each data point\n\ncluster_labels = kmeans.labels_\n\n\n# Add the cluster labels as a new column to the original dataset\n\ncustomers['Cluster'] = cluster_labels\n\n\ncustomers","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:34.692543Z","iopub.execute_input":"2024-07-24T02:55:34.692873Z","iopub.status.idle":"2024-07-24T02:55:34.734706Z","shell.execute_reply.started":"2024-07-24T02:55:34.692845Z","shell.execute_reply":"2024-07-24T02:55:34.733667Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Cluster Analysis**","metadata":{}},{"cell_type":"code","source":"sns.countplot(data=customers, x=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:34.736248Z","iopub.execute_input":"2024-07-24T02:55:34.736573Z","iopub.status.idle":"2024-07-24T02:55:34.912254Z","shell.execute_reply.started":"2024-07-24T02:55:34.736544Z","shell.execute_reply":"2024-07-24T02:55:34.910946Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Which features do actually make a difference?**","metadata":{}},{"cell_type":"markdown","source":"**Now let's see to which extent do each feature affect the clustering decision?**","metadata":{}},{"cell_type":"code","source":"customers_corr = pd.DataFrame(customers)\n\n# handle Datetime column\n\ncustomers_corr['Year'] = customers_corr['Dt_Customer'].dt.year\n\ncustomers_corr['Month'] = customers_corr['Dt_Customer'].dt.month\n\ncustomers_corr['Day'] = customers_corr['Dt_Customer'].dt.day\n\ncustomers_corr = customers_corr.drop('Dt_Customer', axis=1)\n\n# handle categorical column by getting dummies\n\ncustomers_corr = pd.get_dummies(customers_corr)\n\n\n\n# Calculate the correlation between each feature and the \"Cluster\" column\n\ncluster_corr = customers_corr.corrwith(customers_corr['Cluster'])\n\n\n# Create a bar plot to visualize the correlations\n\nplt.figure(figsize=(15, 6))\n\nsns.barplot(x=cluster_corr.index, y=cluster_corr.values, alpha=0.8)\n\nplt.xticks(rotation=45)\n\nplt.title('Correlation between Features and Cluster')\n\nplt.xlabel('Features')\n\nplt.ylabel('Correlation Coefficient')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:34.913828Z","iopub.execute_input":"2024-07-24T02:55:34.914655Z","iopub.status.idle":"2024-07-24T02:55:35.620747Z","shell.execute_reply.started":"2024-07-24T02:55:34.914602Z","shell.execute_reply":"2024-07-24T02:55:35.619712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Interesting!, There seems to be a lot of irrelevant columns**\n\n**So the Important ones that I'll keep are:**\n* **Income**\n* **NumDealsPurchases**\n* **NumCatalogPurchases**\n* **NumStorePurchases**\n* **NumWebVisitsMonth**\n* **Offspring**\n* **Spending**\n* **AcceptedCmp1**\n* **AcceptedCmp5**","metadata":{}},{"cell_type":"code","source":"important = customers.loc[:, [\"Income\", \"NumDealsPurchases\", \"NumCatalogPurchases\",\n                              \"NumStorePurchases\", \"NumWebVisitsMonth\", \"Offspring\",\n                              \"Spending\", \"AcceptedCmp1\", \"AcceptedCmp5\", \"Cluster\"]]\n\n\nimportant","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:35.622398Z","iopub.execute_input":"2024-07-24T02:55:35.622766Z","iopub.status.idle":"2024-07-24T02:55:35.640845Z","shell.execute_reply.started":"2024-07-24T02:55:35.622735Z","shell.execute_reply":"2024-07-24T02:55:35.639803Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**I'd like to see the predictive power of these features**\n\n**So I'll fit a Decision Tree classifier plus a Random Forest Classifier and see the accuracy!**","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.model_selection import KFold\n\n\n\n# Create a decision tree classifier\n\ndt_classifier = DecisionTreeClassifier(random_state=42)\n\n\n# Create a 5-fold cross-validation object\n\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n\n# Perform 5-fold cross-validation\n\nscores = cross_val_score(dt_classifier, important.drop(\"Cluster\", axis=1), important['Cluster'], cv=kf, scoring='accuracy')\n\n\n# Print the average accuracy\n\nprint(\"Average accuracy Decision Tree:\", scores.mean())\n\n\n\n# Create a Random Forest classifier\n\nrf_classifier = RandomForestClassifier(random_state=42)\n\n\n# Create a 5-fold cross-validation object\n\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n\n# Perform 5-fold cross-validation\n\nscores = cross_val_score(rf_classifier, important.drop(\"Cluster\", axis=1), important['Cluster'], cv=kf, scoring='accuracy')\n\n\n# Print the average accuracy\n\nprint(\"Average accuracy Random Forest:\", scores.mean())","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:35.64282Z","iopub.execute_input":"2024-07-24T02:55:35.643267Z","iopub.status.idle":"2024-07-24T02:55:37.451102Z","shell.execute_reply.started":"2024-07-24T02:55:35.643227Z","shell.execute_reply":"2024-07-24T02:55:37.449859Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Pretty Decent Accuracy, this shows that the features selected do possess some predictive power, now let's see feature importances**","metadata":{}},{"cell_type":"code","source":"# Train the Random Forest classifier on the entire dataset\n\n\nrf_classifier.fit(important.drop(\"Cluster\", axis=1), important['Cluster'])\n\n\n# Extract the feature importance\n\n\nfeature_importance = rf_classifier.feature_importances_\n\n\n# Create a DataFrame to store the feature importance\n\n\nimportance_df = pd.DataFrame({'Feature': important.drop(\"Cluster\", axis=1).columns, \n\n                              'Importance': feature_importance})\n\n\n# Sort the DataFrame by importance in descending order\n\n\nimportance_df = importance_df.sort_values('Importance', ascending=False)\n\n\n# Plot the feature importance using a bar chart\n\n\nplt.figure(figsize=(10, 6))\n\nsns.barplot(x='Importance', y='Feature', data=importance_df)\n\nplt.title('Feature Importance')\n\nplt.xlabel('Importance')\n\nplt.ylabel('Feature')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:37.452742Z","iopub.execute_input":"2024-07-24T02:55:37.453184Z","iopub.status.idle":"2024-07-24T02:55:38.19099Z","shell.execute_reply.started":"2024-07-24T02:55:37.453144Z","shell.execute_reply":"2024-07-24T02:55:38.189556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Offspring seems to lack importance compared to other features**\n\n**the 2 features above it seem to be close in terms of importance just like the 4 features above \"AcceptedCmp5\"**\n\n**\"Spending\" and \"Income\" are superior especially \"Spending\" so there will be more emphasis on them in terms of cluster analysis**","metadata":{}},{"cell_type":"markdown","source":"# **Now Let's Define the key characteristics of each cluster!**","metadata":{}},{"cell_type":"code","source":"import warnings\n\n\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\n\nsns.kdeplot(data=important, x=\"Spending\", hue=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:38.19243Z","iopub.execute_input":"2024-07-24T02:55:38.192808Z","iopub.status.idle":"2024-07-24T02:55:38.635665Z","shell.execute_reply.started":"2024-07-24T02:55:38.192774Z","shell.execute_reply":"2024-07-24T02:55:38.634542Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Cluster 0 is characterized by low spending**\n\n\n**Cluster 1 is characterized by low-medium spending**\n\n\n**Cluster 2 is characterized by high spending**\n\n\n**Cluster 3 is characterized by medium spending**","metadata":{}},{"cell_type":"code","source":"sns.kdeplot(data=important, x=\"Income\", hue=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:38.637204Z","iopub.execute_input":"2024-07-24T02:55:38.637632Z","iopub.status.idle":"2024-07-24T02:55:39.329482Z","shell.execute_reply.started":"2024-07-24T02:55:38.63759Z","shell.execute_reply":"2024-07-24T02:55:39.328394Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Cluster 0 is mostly characterized by low income**\n\n\n**Cluster 1 is mostly characterized by medium income**\n\n\n**Cluster 2 is characterized by high income**\n\n\n**Cluster 3 is mostly characterized by medium-high income**","metadata":{}},{"cell_type":"code","source":"sns.kdeplot(data=important, x=\"NumStorePurchases\", hue=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:39.330742Z","iopub.execute_input":"2024-07-24T02:55:39.331078Z","iopub.status.idle":"2024-07-24T02:55:39.765263Z","shell.execute_reply.started":"2024-07-24T02:55:39.33105Z","shell.execute_reply":"2024-07-24T02:55:39.763943Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Cluster 0 is the most distinguishable one here mostly ranging from 2 to 4**\n\n**The rest are pretty similar**","metadata":{}},{"cell_type":"code","source":"sns.kdeplot(data=important, x=\"NumCatalogPurchases\", hue=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:39.766523Z","iopub.execute_input":"2024-07-24T02:55:39.766831Z","iopub.status.idle":"2024-07-24T02:55:40.181662Z","shell.execute_reply.started":"2024-07-24T02:55:39.766805Z","shell.execute_reply":"2024-07-24T02:55:40.180589Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Same as above**","metadata":{}},{"cell_type":"code","source":"sns.kdeplot(data=important, x=\"NumDealsPurchases\", hue=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:40.183008Z","iopub.execute_input":"2024-07-24T02:55:40.183342Z","iopub.status.idle":"2024-07-24T02:55:40.596022Z","shell.execute_reply.started":"2024-07-24T02:55:40.183313Z","shell.execute_reply":"2024-07-24T02:55:40.594688Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**All are pretty similar here with Cluster 1 being more distinguishable from 5 to 7**","metadata":{}},{"cell_type":"code","source":"sns.kdeplot(data=important, x=\"NumWebVisitsMonth\", hue=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:40.597594Z","iopub.execute_input":"2024-07-24T02:55:40.598064Z","iopub.status.idle":"2024-07-24T02:55:41.039974Z","shell.execute_reply.started":"2024-07-24T02:55:40.598024Z","shell.execute_reply":"2024-07-24T02:55:41.038903Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Clusters 0 and 1 mostly characterized by higher number of visits**\n\n**Clusters 2 and 3 mostly characterized by lower number of visits**","metadata":{}},{"cell_type":"code","source":"sns.countplot(data=important, hue=\"AcceptedCmp5\", x=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:41.041572Z","iopub.execute_input":"2024-07-24T02:55:41.041992Z","iopub.status.idle":"2024-07-24T02:55:41.264146Z","shell.execute_reply.started":"2024-07-24T02:55:41.041954Z","shell.execute_reply":"2024-07-24T02:55:41.263067Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Clusters 0 and 1 didn't accept campaign 5**\n\n**While 2/3 of Cluster 2 accepted it and most Cluster 3 didn't accept it**","metadata":{}},{"cell_type":"code","source":"sns.countplot(data=important, hue=\"AcceptedCmp1\", x=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:41.265854Z","iopub.execute_input":"2024-07-24T02:55:41.266323Z","iopub.status.idle":"2024-07-24T02:55:41.489097Z","shell.execute_reply.started":"2024-07-24T02:55:41.266281Z","shell.execute_reply":"2024-07-24T02:55:41.487964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Clusters 0 and 1 didn't accept campaign 1**\n\n**While more of Cluster 2 accepted it and most Cluster 3 didn't accept it**","metadata":{}},{"cell_type":"code","source":"sns.countplot(data=important, hue=\"Offspring\", x=\"Cluster\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-24T02:55:41.490595Z","iopub.execute_input":"2024-07-24T02:55:41.491041Z","iopub.status.idle":"2024-07-24T02:55:41.747052Z","shell.execute_reply.started":"2024-07-24T02:55:41.490999Z","shell.execute_reply":"2024-07-24T02:55:41.745835Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Cluster 0 mostly has 1 or 2 kids**\n\n**Cluster 1 mostly has 1 or 2 kids**\n\n**Cluster 2 mostly has 0 kids**\n\n**Cluster 3 mostly has 0 or 1 kids**","metadata":{}},{"cell_type":"markdown","source":"# **Conclusion**","metadata":{}},{"cell_type":"markdown","source":"================\n\n\nOur cluster analysis revealed four distinct customer segments, each with unique characteristics. The segments are differentiated by their spending habits, income levels, and purchasing behavior.\n\n\n**Segmentation Overview**\n\n\n* **Frugal Families (Cluster 0)**: Low spenders with low income, characterized by fewer store and catalog purchases, frequent visits, and a higher likelihood of having 1-2 kids. They tend to reject campaigns 1 and 5.\n\n* **Middle-Income Moderates (Cluster 1)**: Medium-low spenders with medium income, similar to Cluster 0 in terms of purchasing behavior, but with a slightly higher acceptance of campaigns.\n\n* **High-Rolling Singles (Cluster 2)**: High spenders with high income, characterized by lower visit frequencies, a higher acceptance of campaigns 1 and 5, and a majority having no kids.\n\n* **Aspirational Families (Cluster 3)**: Medium-high spenders with medium-high income, with purchasing behavior similar to Clusters 0 and 1, but with a lower acceptance of campaigns and a majority having 0-1 kids.\n\n\nThese segments provide valuable insights for targeted marketing strategies, allowing businesses to tailor their campaigns and promotions to specific customer groups.","metadata":{}}]}